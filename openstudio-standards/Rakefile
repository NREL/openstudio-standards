
require 'bundler/gem_tasks'
begin
  Bundler.setup
rescue Bundler::BundlerError => e
  $stderr.puts e.message
  $stderr.puts 'Run `bundle install` to install missing gems'
  exit e.status_code
end

require 'rake/testtask'
desc 'Run test PRM'
Rake::TestTask.new('test:prm') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_create_prm_dummy_office.rb' # Takes about a minute for me
  ]
end

require 'rake/testtask'
desc 'Run test group 0'
Rake::TestTask.new('test:gem_group_0') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_primary_school.rb',
  # 'openstudio-standards/test/test_warehouse.rb'
  ]
end

require 'rake/testtask'
desc 'Run test group 1'
Rake::TestTask.new('test:gem_group_1') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_secondary_school.rb', # 70 min
  'openstudio-standards/test/test_medium_office.rb'
  ]
end

require 'rake/testtask'
desc 'Run test group 2'
Rake::TestTask.new('test:gem_group_2') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_large_hotel.rb', # 45 min
  'openstudio-standards/test/test_large_office.rb', # 23 min
  'openstudio-standards/test/test_quick_service_restaurant.rb', # 8 min
  'openstudio-standards/test/test_strip_mall.rb'
  ]
end

require 'rake/testtask'
desc 'Run test group 3'
Rake::TestTask.new('test:gem_group_3') do |task|
  task.test_files = FileList[
  'openstudio-standards/test/test_small_hotel.rb', # 80 min
  'openstudio-standards/test/test_retail_standalone.rb', # 6 min
  'openstudio-standards/test/test_full_service_restaurant.rb', # 10 min
  'openstudio-standards/test/test_small_office.rb', # 7 min
  'openstudio-standards/test/test_mid_rise_apartment.rb', # 7 min
  'openstudio-standards/test/test_high_rise_apartment.rb' # 7 min
  ]
end

require 'rake/testtask'
desc 'Run the measure tests'
Rake::TestTask.new('test:one_building') do |task|
  task.libs << 'test'
  task.test_files = FileList['openstudio-standards/test/test_one_building.rb']
end

require 'rake/testtask'
desc 'Run the measure tests'
Rake::TestTask.new('test:gem') do |task|
  task.libs << 'test'
  task.test_files = FileList['openstudio-standards/test/test_*.rb']
end

require 'rake/testtask'
desc 'Run the measure tests'
Rake::TestTask.new('test:measures') do |task|
  task.test_files = FileList[
  # TOO LONG 'measures/apply_system1/tests/full_hvac_test.rb',
  'measures/btap_apply_necb_rules/tests/apply_necb_rules_Test.rb',
  # TOO LONG 'measures/btap_campus_classic/tests/btap_coldlake_classic_test.rb',
  'measures/btap_change_building_location/tests/btap_change_location_test.rb',
  'measures/btap_create_doe_necb_models/tests/DOE2NECB_Model_Test.rb',
  'measures/btap_equest_converter/tests/btap_equest_converter_test.rb',
  'measures/btap_replace_model/tests/ReplaceModel_Test.rb',
  'measures/btap_set_default_construction_set/tests/set_default_construction_set_test.rb',
  # TOO Long 'measures/create_DOE_prototype_building/tests/create_DOE_prototype_building_test.rb',
  'measures/UtilityTariffs/tests/UtilityTariffs_Test.rb'
  ]
end

desc 'Run all tests'
task 'test:all' => ['test:prm', 'test:gem', 'test:measures']

require "#{File.dirname(__FILE__)}/data/standards/manage_OpenStudio_Standards.rb"
desc 'Download OpenStudio_Standards from Google & export JSONs'
task 'data:update' do
  download_google_spreadsheet
  export_spreadsheet_to_json
end

task 'data:update:manual' do
  export_spreadsheet_to_json
end

require 'yard'
desc 'Generate the documentation'
YARD::Rake::YardocTask.new(:doc) do |task|
  Dir.chdir('../')
  task.stats_options = ['--list-undoc']
end

desc 'Show the documentation in a web browser'
task 'doc:show' => [:doc] do
  link = "#{Dir.pwd}/openstudio-standards/doc/index.html"
  if RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/
    system "start #{link}"
  elsif RbConfig::CONFIG['host_os'] =~ /darwin/
    system "open #{link}"
  elsif RbConfig::CONFIG['host_os'] =~ /linux|bsd/
    system "xdg-open #{link}"
  end
end

require 'rubocop/rake_task'
desc 'Check the code for style consistency'
RuboCop::RakeTask.new(:rubocop) do |task|
  task.options = ['--no-color', '--out=rubocop-results.xml']
  task.formatters = ['RuboCop::Formatter::CheckstyleFormatter']
  task.requires = ['rubocop/formatter/checkstyle_formatter']
  # don't abort rake on failure
  task.fail_on_error = false
end

desc 'Build, install, test gem & measures'
task :btest => [:install, 'test:all']

task :default => :btest

require 'fileutils'

def file_out_dir
  File.absolute_path(File.join(__FILE__,"..","..","ci_test_files"))
end

def doe_dir
  File.absolute_path(File.join(__FILE__,"..","..","doe_prototype"))
end

def cleanup_output_folders
  dirname = File.join(file_out_dir(), 'output')
  if File.directory?(dirname)
    puts "Removing hvac output directory : #{dirname}"
    FileUtils.rm_r(dirname)
  end
  necb_out_dirname = File.absolute_path(File.join(__FILE__,"..","..","necb", 'output'))
  if File.directory?(necb_out_dirname)
    puts "Removing necb output directory : #{necb_out_dirname}"
    FileUtils.rm_r(necb_out_dirname)
  end
  nrel_out_dirname = File.absolute_path(File.join(__FILE__,"..","..","..", 'output'))
  if File.directory?(nrel_out_dirname)
    puts "Removing nrel output directory : #{nrel_out_dirname}"
    FileUtils.rm_r(nrel_out_dirname)
  end
end

# copied and modified from https://github.com/rubyworks/facets/blob/master/lib/core/facets/string/snakecase.rb
class String
  def snek
    #gsub(/::/, '/').
    gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
        gsub(/([a-z\d])([A-Z])/,'\1_\2').
        tr('-', '_').
        gsub(/\s/, '_').
        gsub(/__+/, '_').
        gsub(/#+/, '').
        gsub(/\"/, '').
        downcase
  end
end

def generate_ci_bldg_test_files
  templates = ['NECB2011', 'NECB2015']
  building_types = [
      "FullServiceRestaurant",
      "HighriseApartment",
      "Hospital",
      "LargeHotel",
      "LargeOffice",
      "MediumOffice",
      "MidriseApartment",
      "Outpatient",
      "PrimarySchool",
      "QuickServiceRestaurant",
      "RetailStandalone",
      "RetailStripmall",
      "SecondarySchool",
      "SmallHotel",
      "SmallOffice",
      "Warehouse"
  ]
  fuel_types = ['gas', 'electric']
  out_dir = file_out_dir()
  FileUtils.mkdir_p out_dir

  templates.each {|template|
    building_types.each {|building_type|
      fuel_types.each {|fuel_type|
        filename = File.join(out_dir,"test_necb_bldg_#{building_type}_#{template}_#{fuel_type}.rb")
        file_string =%Q{
require_relative '../helpers/minitest_helper'
require_relative '../helpers/create_doe_prototype_helper'
require_relative '../helpers/compare_models_helper'
require_relative '../necb/regression_helper'

class Test_#{building_type}_#{template}_#{fuel_type} < NECBRegressionHelper
  def setup()
    super()
    @building_type = '#{building_type}'
  end
  def test_#{template}_#{building_type}_regression_#{fuel_type}()
    result, msg = create_model_and_regression_test(@building_type,
                                                   @#{fuel_type}_location,
                                                   '#{template}'
    )
    assert(result, msg)
  end
end
}
        File.open(filename, 'w') { |file| file.write(file_string) }
      }
    }
  }
end

def write_file_path_to_ci_tests_txt
  circleci_tests_txt_path = File.absolute_path(File.join(__FILE__, "..", "..", "circleci_tests.txt"))
  #puts circleci_tests_txt_path

  # get the content of circleci_tests.txt file
  files = IO.readlines(circleci_tests_txt_path)
  new_file_content = files.clone

  # remove lines which contains the test_necb_bldg_*.rb
  files.each_with_index {|line, i|
    if line.include?("necb/test_necb_bldg_") or \
       line.include?("necb/test_necb_hvac") or \
       line.include?("doe_prototype/test_add_hvac_systems") or \
       line.include?("ci_test_files/") # remove all previously written ci_test_files

      new_file_content = new_file_content - [files[i]]
    end
  }

  # overwrite circleci_tests.txt without the test_necb_bldg_*.rb lines
  File.open(circleci_tests_txt_path, 'w') { |f|
    new_file_content.each {|line|
      f.puts line
    }
  }

  # add the new nrcan files generated by this script to the circleci_tests.txt
  File.open(circleci_tests_txt_path, 'a') { |f|
    files_path = File.expand_path(File.join(__FILE__,"..","..","ci_test_files", "test_necb_*.rb"))
    puts files_path
    Dir[files_path].sort.each {|path|
      f.puts(path.to_s.gsub(/^.+(openstudio-standards\/test\/)/,''))
    }
  }

  # add the new doe files generated by this script to the circleci_tests.txt
  File.open(circleci_tests_txt_path, 'a') { |f|
    files_path = File.expand_path(File.join(__FILE__,"..","..","ci_test_files", "doe_test*.rb"))
    puts files_path
    Dir[files_path].sort.each {|path|
      f.puts(path.to_s.gsub(/^.+(openstudio-standards\/test\/)/,''))
    }
  }
end

def copy_model_files_for_hvac_tests
  out_dir = file_out_dir()
  model_dir = File.join(out_dir, 'models')
  FileUtils.mkpath(model_dir)
  FileUtils.copy_entry( File.absolute_path(File.join(__dir__, "..", "necb", "models")), model_dir)
end

def copy_doe_model_files_for_hvac_tests
  model_dir = File.join(file_out_dir(), 'models')
  FileUtils.mkpath(model_dir)
  FileUtils.copy_entry( File.absolute_path(File.join(doe_dir(), "models")), model_dir)
end

def generate_hvac_sys1_files

  boiler_fueltypes = ["NaturalGas", "Electricity", "FuelOil#2"]
  mau_types = [true, false]
  mau_heating_coil_types = ["Hot Water", "Electric"]
  baseboard_types = ["Hot Water", "Electric"]

  boiler_fueltypes.each {|boiler_fueltype|
    mau_types.each {|mau_type|
      mau_heating_coil_types.each {|mau_heating_coil_type|
        baseboard_types.each {|baseboard_type|
        filename = File.join(file_out_dir(),"test_necb_hvac_system_1-#{boiler_fueltype.snek}-#{mau_type.to_s.snek}-#{mau_heating_coil_type.snek}-#{baseboard_type.snek}.rb")
        puts filename
        file_string = %q{
require_relative '../helpers/minitest_helper'
require_relative '../helpers/create_doe_prototype_helper'


#This will run all the combinations possible with the inputs for each system.  The test will.
#0. Save the baseline file as baseline.osm
#1.	Add the system to the model using the hvac.rb routines and save that step as *.rb
#2.	Run the Standards methods and save that as the *.osm.
#3.	The name of the file will represent the combination used for that system
#4.	Only after all the system files are created the files will then be simulated.
#5.	Annual results will be contained in the Annual_results.csv file and failed simulations will be in the Failted.txt file.
#
#All output is in the test/output folder.
#Set the switch true to run the standards in the test
#PERFORM_STANDARDS = true
#Set to true to run the simulations.
#FULL_SIMULATIONS = true
#
#NOTE: The test will fail on the first error for each system to save time.
#NOTE: You can use Kdiff3 three file to select the baseline, *.hvac.rb, and *.osm
#      file for a three way diff of before sizing, and then standard application.
#NOTE: To focus on a single system type "dont_" in front of the tests you do not want to run.
#       EX: def dont_test_system_1()
# Hopefully this makes is easier to debug the HVAC stuff!


class NECB_HVAC_System_1_Test < MiniTest::Test


  WEATHER_FILE = 'CAN_ON_Toronto.Pearson.Intl.AP.716240_CWEC2016.epw'
  Vintages = ['NECB2011']


  #System #1 ToDo
  # mua_types = false will fail. (PTAC Issue Kamel Mentioned)
  #Control zone for SZ systems.


  def test_system_1_$(boiler_fueltypes_snake)_$(mau_types_snake)_$(mau_heating_coil_types_snake)_$(baseboard_types_snake)()
    boiler_fueltypes = ["$(boiler_fueltypes)"]
    mau_types = [$(mau_types)]
    mau_heating_coil_types = ["$(mau_heating_coil_types)"]
    baseboard_types = ["$(baseboard_types)"]
    output_folder = "#{File.dirname(__FILE__)}/output/test_necb_system_1"

    name = String.new

    #Create folder
    # FileUtils.rm_rf(output_folder)
    FileUtils::mkdir_p(output_folder)

    #interate through combinations.

    Vintages.each do |vintage|
      standard = Standard.build(vintage)
      boiler_fueltypes.each do |boiler_fueltype|
        baseboard_types.each do |baseboard_type|
          mau_types.each do |mau_type|
            hw_loop = nil
            model = nil
            if mau_type == true
              mau_heating_coil_types.each do |mau_heating_coil_type|
                name = "sys1_Boiler~#{boiler_fueltype}_Mau~#{mau_type}_MauCoil~#{mau_heating_coil_type}_Baseboard~#{baseboard_type}"
                puts "***************************************#{name}*******************************************************\n"
                model = BTAP::FileIO::load_osm("#{File.dirname(__FILE__)}/models/5ZoneNoHVAC.osm")
                BTAP::Environment::WeatherFile.new(WEATHER_FILE).set_weather_file(model)
                if (baseboard_type == "Hot Water") || (mau_heating_coil_type == "Hot Water")
                  hw_loop = OpenStudio::Model::PlantLoop.new(model)
                  BTAP::Resources::HVAC::HVACTemplates::NECB2011::setup_hw_loop_with_components(model, hw_loop, boiler_fueltype, model.alwaysOnDiscreteSchedule)
                end
                BTAP::Resources::HVAC::HVACTemplates::NECB2011::assign_zones_sys1(
                    model,
                    model.getThermalZones,
                    boiler_fueltype,
                    mau_type,
                    mau_heating_coil_type,
                    baseboard_type,
                    hw_loop)
                #Save the model after btap hvac.
                BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.hvacrb")
                #run the standards
                result = run_the_measure( model, standard, "#{output_folder}/#{name}/sizing" )
                #Save the model
                BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.osm")
                assert_equal(true, result, "Failure in Standards for #{name}")
              end
            else
              name = "sys1_Boiler~#{boiler_fueltype}_Mau~#{mau_type}_MauCoil~None_Baseboard~#{baseboard_type}"
              puts "***************************************#{name}*******************************************************\n"
              model = BTAP::FileIO::load_osm("#{File.dirname(__FILE__)}/models/5ZoneNoHVAC.osm")
              BTAP::Environment::WeatherFile.new(WEATHER_FILE).set_weather_file(model)
              if (baseboard_type == "Hot Water")
                hw_loop = OpenStudio::Model::PlantLoop.new(model)
                BTAP::Resources::HVAC::HVACTemplates::NECB2011::setup_hw_loop_with_components(model, hw_loop, boiler_fueltype, model.alwaysOnDiscreteSchedule)
              end
              BTAP::Resources::HVAC::HVACTemplates::NECB2011::assign_zones_sys1(
                  model,
                  model.getThermalZones,
                  boiler_fueltype,
                  mau_type,
                  "Electric", #value will not be used.
                  baseboard_type,
                  hw_loop)
              #Save the model after btap hvac.
              BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.hvacrb")

              result = run_the_measure(model,standard, "#{output_folder}/#{name}/sizing")

              #Save model after standards
              BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.osm")
              assert_equal(true, result, "Failure in Standards for #{name}")

            end
            result = standard.model_run_simulation_and_log_errors(model, "#{output_folder}/#{name}/")
            assert_equal(true, result, "Failure in Standards for #{name}")
          end
        end
      end
    end
  end


  def run_the_measure(model, standard, sizing_dir)
      # Hard-code the building vintage
      building_type = 'FullServiceRestaurant' # Does not use this...
      climate_zone = 'NECB HDD Method'

      if !Dir.exists?(sizing_dir)
        FileUtils.mkdir_p(sizing_dir)
      end
      # Perform a sizing run
      if standard.model_run_sizing_run(model, "#{sizing_dir}/SizingRun1") == false
        puts "could not find sizing run #{sizing_dir}/SizingRun1"
        raise("could not find sizing run #{sizing_dir}/SizingRun1")
        return false
      else
        puts "found sizing run #{sizing_dir}/SizingRun1"
      end

      # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/before.osm")
      # need to set prototype assumptions so that HRV added
      standard.model_apply_prototype_hvac_assumptions(model, building_type, climate_zone)
      # Apply the HVAC efficiency standard
      standard.model_apply_hvac_efficiency_standard(model, climate_zone)
      #self.getCoilCoolingDXSingleSpeeds.sort.each {|obj| obj.setStandardEfficiencyAndCurves(self.template, self.standards)}
      # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/after.osm")
      return true
    end
end}

        file_string['$(boiler_fueltypes)'] = boiler_fueltype
        file_string['$(mau_types)'] = mau_type.to_s
        file_string['$(mau_heating_coil_types)'] = mau_heating_coil_type
        file_string['$(baseboard_types)'] = baseboard_type

        file_string['$(boiler_fueltypes_snake)'] = boiler_fueltype.to_s.snek
        file_string['$(mau_types_snake)'] = mau_type.to_s.snek
        file_string['$(mau_heating_coil_types_snake)'] = mau_heating_coil_type.to_s.snek
        file_string['$(baseboard_types_snake)'] = baseboard_type.to_s.snek

        File.open(filename, 'w') { |file| file.write(file_string) }
        }
      }
    }
  }

end

def generate_hvac_sys2_files
  boiler_fueltypes = ["NaturalGas", "Electricity", "FuelOil#2",]
  chiller_types = ["Scroll", "Centrifugal", "Rotary Screw", "Reciprocating"]
  mua_cooling_types = ["Hydronic", "DX"]
  boiler_fueltypes.each {|boiler_fueltype|
    chiller_types.each {|chiller_type|
      mua_cooling_types.each {|mua_cooling_type|
        filename = File.join(file_out_dir(),"test_necb_hvac_system_2_#{boiler_fueltype.snek}-#{chiller_type.to_s.snek}-#{mua_cooling_type.snek}.rb")
        puts filename
        file_string = %q{require_relative '../helpers/minitest_helper'
require_relative '../helpers/create_doe_prototype_helper'


#This will run all the combinations possible with the inputs for each system.  The test will.
#0. Save the baseline file as baseline.osm
#1.	Add the system to the model using the hvac.rb routines and save that step as *.rb
#2.	Run the Standards methods and save that as the *.osm.
#3.	The name of the file will represent the combination used for that system
#4.	Only after all the system files are created the files will then be simulated.
#5.	Annual results will be contained in the Annual_results.csv file and failed simulations will be in the Failted.txt file.
#
#All output is in the test/output folder.
#Set the switch true to run the standards in the test
#PERFORM_STANDARDS = true
#Set to true to run the simulations.
#FULL_SIMULATIONS = true
#
#NOTE: The test will fail on the first error for each system to save time.
#NOTE: You can use Kdiff3 three file to select the baseline, *.hvac.rb, and *.osm
#      file for a three way diff of before sizing, and then standard application.
#NOTE: To focus on a single system type "dont_" in front of the tests you do not want to run.
#       EX: def dont_test_system_1()
# Hopefully this makes is easier to debug the HVAC stuff!


class NECB_HVAC_System_2_Test < MiniTest::Test
  WEATHER_FILE = 'CAN_ON_Toronto.Pearson.Intl.AP.716240_CWEC2016.epw'
  Vintages = ['NECB2011']


  #System #2
  #Sizing Convergence Errors when mua_cooling_types = DX
  def test_system_2_$(boiler_fueltypes_snake)_$(chiller_types_snake)_$(mua_cooling_types_snake)()

    boiler_fueltypes = ["$(boiler_fueltype)"]
    chiller_types = ["$(chiller_type)"]
    mua_cooling_types = ["$(mua_cooling_type)"]
    output_folder = "#{File.dirname(__FILE__)}/output/test_necb_system_2"

    name = String.new
    #create folders
    # FileUtils.rm_rf(output_folder)
    FileUtils::mkdir_p(output_folder)

    Vintages.each do |vintage|
      standard = Standard.build(vintage)
      boiler_fueltypes.each do |boiler_fueltype|
        chiller_types.each do |chiller_type|
          mua_cooling_types.each do |mua_cooling_type|
            name = "sys2_Boiler~#{boiler_fueltype}_Chiller#~#{chiller_type}_MuACoolingType~#{mua_cooling_type}"
            puts "***************************************#{name}*******************************************************\n"
            model = BTAP::FileIO::load_osm("#{File.dirname(__FILE__)}/models/5ZoneNoHVAC.osm")
            BTAP::Environment::WeatherFile.new(WEATHER_FILE).set_weather_file(model)
            hw_loop = OpenStudio::Model::PlantLoop.new(model)
            BTAP::Resources::HVAC::HVACTemplates::NECB2011::setup_hw_loop_with_components(model, hw_loop, boiler_fueltype, model.alwaysOnDiscreteSchedule)
            BTAP::Resources::HVAC::HVACTemplates::NECB2011::assign_zones_sys2(
                model,
                model.getThermalZones,
                boiler_fueltype,
                chiller_type,
                mua_cooling_type,
                hw_loop)
            #Save the model after btap hvac.
            BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.hvacrb")
            result = run_the_measure(model, standard, "#{output_folder}/#{name}/sizing")
            #Save model after standards
            BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.osm")
            assert_equal(true, result, "Failure in Standards for #{name}")
            #Run Sims
            result = standard.model_run_simulation_and_log_errors(model, "#{output_folder}/#{name}/")
            assert_equal(true, result, "Failure in Standards for #{name}")
          end
        end
      end
    end
  end

  def run_the_measure(model, standard, sizing_dir)
    # Hard-code the building vintage
    building_type = 'FullServiceRestaurant' # Does not use this...
    climate_zone = 'NECB HDD Method'

    if !Dir.exists?(sizing_dir)
      FileUtils.mkdir_p(sizing_dir)
    end
    # Perform a sizing run
    if standard.model_run_sizing_run(model, "#{sizing_dir}/SizingRun1") == false
      puts "could not find sizing run #{sizing_dir}/SizingRun1"
      raise("could not find sizing run #{sizing_dir}/SizingRun1")
      return false
    else
      puts "found sizing run #{sizing_dir}/SizingRun1"
    end

    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/before.osm")
    # need to set prototype assumptions so that HRV added
    standard.model_apply_prototype_hvac_assumptions(model, building_type, climate_zone)
    # Apply the HVAC efficiency standard
    standard.model_apply_hvac_efficiency_standard(model, climate_zone)
    #self.getCoilCoolingDXSingleSpeeds.sort.each {|obj| obj.setStandardEfficiencyAndCurves(self.template, self.standards)}
    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/after.osm")
    return true
  end
end
}
        file_string['$(boiler_fueltype)'] = boiler_fueltype
        file_string['$(chiller_type)'] = chiller_type.to_s
        file_string['$(mua_cooling_type)'] = mua_cooling_type

        file_string['$(boiler_fueltypes_snake)'] = boiler_fueltype.to_s.snek
        file_string['$(chiller_types_snake)'] = chiller_type.to_s.snek
        file_string['$(mua_cooling_types_snake)'] = mua_cooling_type.to_s.snek

        File.open(filename, 'w') { |file| file.write(file_string) }
      }
    }
  }

end

def generate_hvac_sys3_files
  boiler_fueltypes = ["NaturalGas", "Electricity", "FuelOil#2"]
  baseboard_types = ["Hot Water", "Electric"]
  heating_coil_types_sys3 = ["Electric", "Gas", "DX"]

  boiler_fueltypes.each {|boiler_fueltype|
    baseboard_types.each {|baseboard_type|
      heating_coil_types_sys3.each {|heating_coil_type|
        filename = File.join(file_out_dir(),"test_necb_hvac_system_3_#{boiler_fueltype.snek}-#{baseboard_type.to_s.snek}-#{heating_coil_type.snek}.rb")
        puts filename
        file_string = %q{
require_relative '../helpers/minitest_helper'
require_relative '../helpers/create_doe_prototype_helper'


#This will run all the combinations possible with the inputs for each system.  The test will.
#0. Save the baseline file as baseline.osm
#1.	Add the system to the model using the hvac.rb routines and save that step as *.rb
#2.	Run the Standards methods and save that as the *.osm.
#3.	The name of the file will represent the combination used for that system
#4.	Only after all the system files are created the files will then be simulated.
#5.	Annual results will be contained in the Annual_results.csv file and failed simulations will be in the Failted.txt file.
#
#All output is in the test/output folder.
#Set the switch true to run the standards in the test
#PERFORM_STANDARDS = true
#Set to true to run the simulations.
#FULL_SIMULATIONS = true
#
#NOTE: The test will fail on the first error for each system to save time.
#NOTE: You can use Kdiff3 three file to select the baseline, *.hvac.rb, and *.osm
#      file for a three way diff of before sizing, and then standard application.
#NOTE: To focus on a single system type "dont_" in front of the tests you do not want to run.
#       EX: def dont_test_system_1()
# Hopefully this makes is easier to debug the HVAC stuff!


class NECB_HVAC_System_3_Test < MiniTest::Test
  WEATHER_FILE = 'CAN_ON_Toronto.Pearson.Intl.AP.716240_CWEC2016.epw'
  Vintages = ['NECB2011']


  def test_system_3_$(boiler_fueltypes_snake)_$(baseboard_types_snake)_$(heating_coil_type_snake)()
    boiler_fueltypes = ["$(boiler_fueltype)"]
    baseboard_types = ["$(baseboard_type)"]
    heating_coil_types_sys3 = ["$(heating_coil_type)"]
    output_folder = "#{File.dirname(__FILE__)}/output/test_necb_system_3"

    name = String.new

    # FileUtils.rm_rf(output_folder)
    FileUtils::mkdir_p(output_folder)

    Vintages.each do |vintage|
      standard = Standard.build(vintage)
      boiler_fueltypes.each do |boiler_fueltype|
        baseboard_types.each do |baseboard_type|
          heating_coil_types_sys3.each do |heating_coil_type_sys3|
            name = "sys3_Boiler~#{boiler_fueltype}_HeatingCoilType#~#{heating_coil_type_sys3}_BaseboardType~#{baseboard_type}"
            puts "***************************************#{name}*******************************************************\n"
            model = BTAP::FileIO::load_osm("#{File.dirname(__FILE__)}/models/5ZoneNoHVAC.osm")
            BTAP::Environment::WeatherFile.new(WEATHER_FILE).set_weather_file(model)
            hw_loop = nil
            if (baseboard_type == "Hot Water")
              hw_loop = OpenStudio::Model::PlantLoop.new(model)
              BTAP::Resources::HVAC::HVACTemplates::NECB2011::setup_hw_loop_with_components(model, hw_loop, boiler_fueltype, model.alwaysOnDiscreteSchedule)
            end
            BTAP::Resources::HVAC::HVACTemplates::NECB2011::assign_zones_sys3(
                model,
                model.getThermalZones,
                boiler_fueltype,
                heating_coil_type_sys3,
                baseboard_type,
                hw_loop)
            #Save the model after btap hvac.
            BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.hvacrb")
            result = run_the_measure(model, standard, "#{output_folder}/#{name}/sizing")
            #Save model after standards
            BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.osm")
            assert_equal(true, result, "Failure in Standards for #{name}")
            #Run Sims
            result = standard.model_run_simulation_and_log_errors(model, "#{output_folder}/#{name}/")
            assert_equal(true, result, "Failure in Standards for #{name}")
          end
        end
      end
    end
  end

  def run_the_measure(model, standard, sizing_dir)
    # Hard-code the building vintage
    building_type = 'FullServiceRestaurant' # Does not use this...
    climate_zone = 'NECB HDD Method'

    if !Dir.exists?(sizing_dir)
      FileUtils.mkdir_p(sizing_dir)
    end
    # Perform a sizing run
    if standard.model_run_sizing_run(model, "#{sizing_dir}/SizingRun1") == false
      puts "could not find sizing run #{sizing_dir}/SizingRun1"
      raise("could not find sizing run #{sizing_dir}/SizingRun1")
      return false
    else
      puts "found sizing run #{sizing_dir}/SizingRun1"
    end

    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/before.osm")
    # need to set prototype assumptions so that HRV added
    standard.model_apply_prototype_hvac_assumptions(model, building_type, climate_zone)
    # Apply the HVAC efficiency standard
    standard.model_apply_hvac_efficiency_standard(model, climate_zone)
    #self.getCoilCoolingDXSingleSpeeds.sort.each {|obj| obj.setStandardEfficiencyAndCurves(self.template, self.standards)}
    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/after.osm")
    return true
  end
end
}
        file_string['$(boiler_fueltype)'] = boiler_fueltype
        file_string['$(baseboard_type)'] = baseboard_type.to_s
        file_string['$(heating_coil_type)'] = heating_coil_type

        file_string['$(boiler_fueltypes_snake)'] = boiler_fueltype.to_s.snek
        file_string['$(baseboard_types_snake)'] = baseboard_type.to_s.snek
        file_string['$(heating_coil_type_snake)'] = heating_coil_type.to_s.snek

        File.open(filename, 'w') { |file| file.write(file_string) }
      }
    }
  }

end

def generate_hvac_sys4_files
  boiler_fueltypes = ["NaturalGas", "Electricity", "FuelOil#2",]
  baseboard_types = ["Hot Water", "Electric"]
  heating_coil_types_sys4 = ["Electric", "Gas"]

  boiler_fueltypes.each {|boiler_fueltype|
    baseboard_types.each {|baseboard_type|
      heating_coil_types_sys4.each {|heating_coil_type|
        filename = File.join(file_out_dir(),"test_necb_hvac_system_4_#{boiler_fueltype.snek}-#{baseboard_type.to_s.snek}-#{heating_coil_type.snek}.rb")
        puts filename

        file_string = %q{require_relative '../helpers/minitest_helper'
require_relative '../helpers/create_doe_prototype_helper'


#This will run all the combinations possible with the inputs for each system.  The test will.
#0. Save the baseline file as baseline.osm
#1.	Add the system to the model using the hvac.rb routines and save that step as *.rb
#2.	Run the Standards methods and save that as the *.osm.
#3.	The name of the file will represent the combination used for that system
#4.	Only after all the system files are created the files will then be simulated.
#5.	Annual results will be contained in the Annual_results.csv file and failed simulations will be in the Failted.txt file.
#
#All output is in the test/output folder.
#Set the switch true to run the standards in the test
#PERFORM_STANDARDS = true
#Set to true to run the simulations.
#FULL_SIMULATIONS = true
#
#NOTE: The test will fail on the first error for each system to save time.
#NOTE: You can use Kdiff3 three file to select the baseline, *.hvac.rb, and *.osm
#      file for a three way diff of before sizing, and then standard application.
#NOTE: To focus on a single system type "dont_" in front of the tests you do not want to run.
#       EX: def dont_test_system_1()
# Hopefully this makes is easier to debug the HVAC stuff!


class NECB_HVAC_System_4_Test < MiniTest::Test
  WEATHER_FILE = 'CAN_ON_Toronto.Pearson.Intl.AP.716240_CWEC2016.epw'
  Vintages = ['NECB2011']


  def test_system_4_$(boiler_fueltypes_snake)_$(baseboard_types_snake)_$(heating_coil_type_snake)()
    boiler_fueltypes = ["$(boiler_fueltype)"]
    baseboard_types = ["$(baseboard_type)"]
    heating_coil_types_sys4 = ["$(heating_coil_type)"]
    output_folder = "#{File.dirname(__FILE__)}/output/test_necb_system_4"

    name = String.new

    # FileUtils.rm_rf(output_folder)
    FileUtils::mkdir_p(output_folder)


    Vintages.each do |vintage|
      standard = Standard.build(vintage)
      boiler_fueltypes.each do |boiler_fueltype|
        baseboard_types.each do |baseboard_type|
          heating_coil_types_sys4.each do |heating_coil|
            name = "sys4_Boiler~#{boiler_fueltype}_HeatingCoilType#~#{heating_coil}_BaseboardType~#{baseboard_type}"
            puts "***************************************#{name}*******************************************************\n"
            model = BTAP::FileIO::load_osm("#{File.dirname(__FILE__)}/models/5ZoneNoHVAC.osm")
            BTAP::Environment::WeatherFile.new(WEATHER_FILE).set_weather_file(model)
            hw_loop = nil
            if (baseboard_type == "Hot Water")
              hw_loop = OpenStudio::Model::PlantLoop.new(model)
              BTAP::Resources::HVAC::HVACTemplates::NECB2011::setup_hw_loop_with_components(model, hw_loop, boiler_fueltype, model.alwaysOnDiscreteSchedule)
            end
            BTAP::Resources::HVAC::HVACTemplates::NECB2011::assign_zones_sys4(
                model,
                model.getThermalZones,
                boiler_fueltype,
                heating_coil,
                baseboard_type,
                hw_loop)
            #Save the model after btap hvac.
            BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.hvacrb")
            result = run_the_measure(model, standard, "#{output_folder}/#{name}/sizing")
            #Save model after standards
            BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.osm")
            assert_equal(true, result, "Failure in Standards for #{name}")
            result = standard.model_run_simulation_and_log_errors(model, "#{output_folder}/#{name}/")
            assert_equal(true, result, "Failure in Standards for #{name}")
          end
        end
      end
    end
  end


  def run_the_measure(model, standard, sizing_dir)
    # Hard-code the building vintage
    building_type = 'FullServiceRestaurant' # Does not use this...
    climate_zone = 'NECB HDD Method'

    if !Dir.exists?(sizing_dir)
      FileUtils.mkdir_p(sizing_dir)
    end
    # Perform a sizing run
    if standard.model_run_sizing_run(model, "#{sizing_dir}/SizingRun1") == false
      puts "could not find sizing run #{sizing_dir}/SizingRun1"
      raise("could not find sizing run #{sizing_dir}/SizingRun1")
      return false
    else
      puts "found sizing run #{sizing_dir}/SizingRun1"
    end

    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/before.osm")
    # need to set prototype assumptions so that HRV added
    standard.model_apply_prototype_hvac_assumptions(model, building_type, climate_zone)
    # Apply the HVAC efficiency standard
    standard.model_apply_hvac_efficiency_standard(model, climate_zone)
    #self.getCoilCoolingDXSingleSpeeds.sort.each {|obj| obj.setStandardEfficiencyAndCurves(self.template, self.standards)}
    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/after.osm")
    return true
  end
end
}
        file_string['$(boiler_fueltype)'] = boiler_fueltype
        file_string['$(baseboard_type)'] = baseboard_type.to_s
        file_string['$(heating_coil_type)'] = heating_coil_type

        file_string['$(boiler_fueltypes_snake)'] = boiler_fueltype.to_s.snek
        file_string['$(baseboard_types_snake)'] = baseboard_type.to_s.snek
        file_string['$(heating_coil_type_snake)'] = heating_coil_type.to_s.snek

        File.open(filename, 'w') { |file| file.write(file_string) }
      }
    }
  }

end

def generate_hvac_sys5_files
  boiler_fueltypes = ["NaturalGas", "Electricity", "FuelOil#2",]
  chiller_types = ["Scroll", "Centrifugal", "Rotary Screw", "Reciprocating"]
  mua_cooling_types = ["DX", "Hydronic"]
  boiler_fueltypes.each {|boiler_fueltype|
    chiller_types.each {|chiller_type|
      mua_cooling_types.each {|mua_cooling_type|
        filename = File.join(file_out_dir(),"test_necb_hvac_system_5_#{boiler_fueltype.snek}-#{chiller_type.to_s.snek}-#{mua_cooling_type.snek}.rb")
        puts filename
        file_string = %q{
require_relative '../helpers/minitest_helper'
require_relative '../helpers/create_doe_prototype_helper'


#This will run all the combinations possible with the inputs for each system.  The test will.
#0. Save the baseline file as baseline.osm
#1.	Add the system to the model using the hvac.rb routines and save that step as *.rb
#2.	Run the Standards methods and save that as the *.osm.
#3.	The name of the file will represent the combination used for that system
#4.	Only after all the system files are created the files will then be simulated.
#5.	Annual results will be contained in the Annual_results.csv file and failed simulations will be in the Failted.txt file.
#
#All output is in the test/output folder.
#Set the switch true to run the standards in the test
#PERFORM_STANDARDS = true
#Set to true to run the simulations.
#FULL_SIMULATIONS = true
#
#NOTE: The test will fail on the first error for each system to save time.
#NOTE: You can use Kdiff3 three file to select the baseline, *.hvac.rb, and *.osm
#      file for a three way diff of before sizing, and then standard application.
#NOTE: To focus on a single system type "dont_" in front of the tests you do not want to run.
#       EX: def dont_test_system_1()
# Hopefully this makes is easier to debug the HVAC stuff!


class NECB_HVAC_System_5_Test < MiniTest::Test
  WEATHER_FILE = 'CAN_ON_Toronto.Pearson.Intl.AP.716240_CWEC2016.epw'
  Vintages = ['NECB2011']

  #System #1 ToDo
  # mua_types = false will fail. (PTAC Issue Kamel Mentioned)
  #Control zone for SZ systems.


  def test_system_5_$(boiler_fueltypes_snake)_$(chiller_types_snake)_$(mua_cooling_types_snake)()
    boiler_fueltypes = ["$(boiler_fueltype)"]
    chiller_types = ["$(chiller_type)"]
    mua_cooling_types = ["$(mua_cooling_type)"]
    output_folder = "#{File.dirname(__FILE__)}/output/test_necb_system_5"

    name = String.new

    # FileUtils.rm_rf(output_folder)
    FileUtils::mkdir_p(output_folder)

    Vintages.each do |vintage|
      standard = Standard.build(vintage)
      boiler_fueltypes.each do |boiler_fueltype|
        chiller_types.each do |chiller_type|
          mua_cooling_types.each do |mua_cooling_type|
            name = "sys5_Boiler~#{boiler_fueltype}_ChillerType~#{chiller_type}_MuaCoolingType~#{mua_cooling_type}"
            puts "***************************************#{name}*******************************************************\n"
            model = BTAP::FileIO::load_osm("#{File.dirname(__FILE__)}/models/5ZoneNoHVAC.osm")
            BTAP::Environment::WeatherFile.new(WEATHER_FILE).set_weather_file(model)
            hw_loop = OpenStudio::Model::PlantLoop.new(model)
            BTAP::Resources::HVAC::HVACTemplates::NECB2011::setup_hw_loop_with_components(model, hw_loop, boiler_fueltype, model.alwaysOnDiscreteSchedule)
            BTAP::Resources::HVAC::HVACTemplates::NECB2011::assign_zones_sys5(
                model,
                model.getThermalZones,
                boiler_fueltype,
                chiller_type,
                mua_cooling_type,
                hw_loop)
            #Save the model after btap hvac.
            BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.hvacrb")
            result = run_the_measure(model, standard, "#{output_folder}/#{name}/sizing")
            #Save model after standards
            BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.osm")
            assert_equal(true, result, "Failure in Standards for #{name}")
            result = standard.model_run_simulation_and_log_errors(model, "#{output_folder}/#{name}/")
            assert_equal(true, result, "Failure in Standards for #{name}")
          end
        end
      end
    end
  end


  def run_the_measure(model, standard, sizing_dir)
    # Hard-code the building vintage
    building_type = 'FullServiceRestaurant' # Does not use this...
    climate_zone = 'NECB HDD Method'

    if !Dir.exists?(sizing_dir)
      FileUtils.mkdir_p(sizing_dir)
    end
    # Perform a sizing run
    if standard.model_run_sizing_run(model, "#{sizing_dir}/SizingRun1") == false
      puts "could not find sizing run #{sizing_dir}/SizingRun1"
      raise("could not find sizing run #{sizing_dir}/SizingRun1")
      return false
    else
      puts "found sizing run #{sizing_dir}/SizingRun1"
    end

    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/before.osm")
    # need to set prototype assumptions so that HRV added
    standard.model_apply_prototype_hvac_assumptions(model, building_type, climate_zone)
    # Apply the HVAC efficiency standard
    standard.model_apply_hvac_efficiency_standard(model, climate_zone)
    #self.getCoilCoolingDXSingleSpeeds.sort.each {|obj| obj.setStandardEfficiencyAndCurves(self.template, self.standards)}
    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/after.osm")
    return true
  end


end
}
        file_string['$(boiler_fueltype)'] = boiler_fueltype
        file_string['$(chiller_type)'] = chiller_type.to_s
        file_string['$(mua_cooling_type)'] = mua_cooling_type

        file_string['$(boiler_fueltypes_snake)'] = boiler_fueltype.to_s.snek
        file_string['$(chiller_types_snake)'] = chiller_type.to_s.snek
        file_string['$(mua_cooling_types_snake)'] = mua_cooling_type.to_s.snek

        File.open(filename, 'w') { |file| file.write(file_string) }
      }
    }
  }

end

def generate_hvac_sys6_files
  boiler_fueltypes = ["NaturalGas", "Electricity", "FuelOil#2",]
  baseboard_types = ["Hot Water", "Electric"]
  chiller_types = ["Scroll"] #,"Centrifugal","Rotary Screw","Reciprocating"] are not working.
  heating_coil_types_sys6 = ["Electric", "Hot Water"]
  fan_types = ["AF_or_BI_rdg_fancurve", "AF_or_BI_inletvanes", "fc_inletvanes", "var_speed_drive"]

  boiler_fueltypes.each {|boiler_fueltype|
    baseboard_types.each {|baseboard_type|
      chiller_types.each {|chiller_type|
        heating_coil_types_sys6.each {|heating_coil_type|
          fan_types.each {|fan_type|
            filename = File.join(file_out_dir(),"test_necb_hvac_system_6_#{boiler_fueltype.snek}-#{baseboard_type.snek}-#{chiller_type.to_s.snek}-#{heating_coil_type.snek}-#{fan_type.to_s.snek}.rb")
            puts filename
            file_string = %q{
require_relative '../helpers/minitest_helper'
require_relative '../helpers/create_doe_prototype_helper'


#This will run all the combinations possible with the inputs for each system.  The test will.
#0. Save the baseline file as baseline.osm
#1.	Add the system to the model using the hvac.rb routines and save that step as *.rb
#2.	Run the Standards methods and save that as the *.osm.
#3.	The name of the file will represent the combination used for that system
#4.	Only after all the system files are created the files will then be simulated.
#5.	Annual results will be contained in the Annual_results.csv file and failed simulations will be in the Failted.txt file.
#
#All output is in the test/output folder.
#Set the switch true to run the standards in the test
#PERFORM_STANDARDS = true
#Set to true to run the simulations.
#FULL_SIMULATIONS = true
#
#NOTE: The test will fail on the first error for each system to save time.
#NOTE: You can use Kdiff3 three file to select the baseline, *.hvac.rb, and *.osm
#      file for a three way diff of before sizing, and then standard application.
#NOTE: To focus on a single system type "dont_" in front of the tests you do not want to run.
#       EX: def dont_test_system_1()
# Hopefully this makes is easier to debug the HVAC stuff!


class NECB_HVAC_System_6_Test < MiniTest::Test
  WEATHER_FILE = 'CAN_ON_Toronto.Pearson.Intl.AP.716240_CWEC2016.epw'
  Vintages = ['NECB2011']

  def test_system_6_$(boiler_fueltype_snake)_$(baseboard_type_snake)_$(chiller_type_snake)_$(heating_coil_type_snake)_$(fan_type_snake)()
    boiler_fueltypes = ["$(boiler_fueltype)"]
    baseboard_types = ["$(baseboard_type)"]
    chiller_types = ["$(chiller_type)"] #,"Centrifugal","Rotary Screw","Reciprocating"] are not working.
    heating_coil_types_sys6 = ["$(heating_coil_type)"]
    fan_types = ["$(fan_type)"]
    output_folder = "#{File.dirname(__FILE__)}/output/test_necb_system_6"

    name = String.new

    # FileUtils.rm_rf(output_folder)
    FileUtils::mkdir_p(output_folder)

    #save baseline

    Vintages.each do |vintage|
      standard = Standard.build(vintage)
      boiler_fueltypes.each do |boiler_fueltype|
        chiller_types.each do |chiller_type|
          baseboard_types.each do |baseboard_type|
            heating_coil_types_sys6.each do |heating_coil_type|
              fan_types.each do |fan_type|
                name = "sys6_Bo~#{boiler_fueltype}_Ch~#{chiller_type}_BB~#{baseboard_type}_HC~#{heating_coil_type}_Fan~#{fan_type}"
                puts "***************************************#{name}*******************************************************\n"
                model = BTAP::FileIO::load_osm("#{File.dirname(__FILE__)}/models/5ZoneNoHVAC.osm")
                BTAP::Environment::WeatherFile.new(WEATHER_FILE).set_weather_file(model)
                hw_loop = nil
                if (baseboard_type == "Hot Water") || (heating_coil_type == "Hot Water")
                  hw_loop = OpenStudio::Model::PlantLoop.new(model)
                  BTAP::Resources::HVAC::HVACTemplates::NECB2011::setup_hw_loop_with_components(model, hw_loop, boiler_fueltype, model.alwaysOnDiscreteSchedule)
                end
                BTAP::Resources::HVAC::HVACTemplates::NECB2011::assign_zones_sys6(
                    model,
                    model.getThermalZones,
                    boiler_fueltype,
                    heating_coil_type,
                    baseboard_type,
                    chiller_type,
                    fan_type,
                    hw_loop)
                #Save the model after btap hvac.
                BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.hvacrb")
                result = run_the_measure( model, standard,"#{output_folder}/#{name}/sizing")
                #Save model after standards
                BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.osm")
                assert_equal(true, result, "Failure in Standards for #{name}")
                result = standard.model_run_simulation_and_log_errors(model, "#{output_folder}/#{name}/")
                assert_equal(true, result, "Failure in Standards for #{name}")
              end
            end
          end
        end
      end
    end
  end

  def run_the_measure(model, standard, sizing_dir)
    # Hard-code the building vintage
    building_type = 'FullServiceRestaurant' # Does not use this...
    climate_zone = 'NECB HDD Method'

    if !Dir.exists?(sizing_dir)
      FileUtils.mkdir_p(sizing_dir)
    end
    # Perform a sizing run
    if standard.model_run_sizing_run(model, "#{sizing_dir}/SizingRun1") == false
      puts "could not find sizing run #{sizing_dir}/SizingRun1"
      raise("could not find sizing run #{sizing_dir}/SizingRun1")
      return false
    else
      puts "found sizing run #{sizing_dir}/SizingRun1"
    end

    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/before.osm")
    # need to set prototype assumptions so that HRV added
    standard.model_apply_prototype_hvac_assumptions(model, building_type, climate_zone)
    # Apply the HVAC efficiency standard
    standard.model_apply_hvac_efficiency_standard(model, climate_zone)
    #self.getCoilCoolingDXSingleSpeeds.sort.each {|obj| obj.setStandardEfficiencyAndCurves(self.template, self.standards)}
    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/after.osm")
    return true
  end
end
}
            file_string['$(boiler_fueltype)'] = boiler_fueltype
            file_string['$(baseboard_type)'] = baseboard_type
            file_string['$(chiller_type)'] = chiller_type
            file_string['$(heating_coil_type)'] = heating_coil_type
            file_string['$(fan_type)'] = fan_type

            file_string['$(boiler_fueltype_snake)'] = boiler_fueltype.to_s.snek
            file_string['$(baseboard_type_snake)'] = baseboard_type.to_s.snek
            file_string['$(chiller_type_snake)'] = chiller_type.to_s.snek
            file_string['$(heating_coil_type_snake)'] = heating_coil_type.to_s.snek
            file_string['$(fan_type_snake)'] = fan_type.to_s.snek

            File.open(filename, 'w') { |file| file.write(file_string) }
          }
        }
      }
    }
  }
end

def generate_hvac_sys7_files
  boiler_fueltypes = ["NaturalGas", "Electricity", "FuelOil#2"]
  chiller_types = ["Scroll", "Centrifugal", "Rotary Screw", "Reciprocating"]
  mua_cooling_types = ["Hydronic", "DX"]
  boiler_fueltypes.each {|boiler_fueltype|
    chiller_types.each {|chiller_type|
      mua_cooling_types.each {|mua_cooling_type|
        filename = File.join(file_out_dir(),"test_necb_hvac_system_7_#{boiler_fueltype.snek}-#{chiller_type.to_s.snek}-#{mua_cooling_type.snek}.rb")
        puts filename
        file_string = %q{
require_relative '../helpers/minitest_helper'
require_relative '../helpers/create_doe_prototype_helper'


#This will run all the combinations possible with the inputs for each system.  The test will.
#0. Save the baseline file as baseline.osm
#1.	Add the system to the model using the hvac.rb routines and save that step as *.rb
#2.	Run the Standards methods and save that as the *.osm.
#3.	The name of the file will represent the combination used for that system
#4.	Only after all the system files are created the files will then be simulated.
#5.	Annual results will be contained in the Annual_results.csv file and failed simulations will be in the Failted.txt file.
#
#All output is in the test/output folder.
#Set the switch true to run the standards in the test
#PERFORM_STANDARDS = true
#Set to true to run the simulations.
#FULL_SIMULATIONS = true
#
#NOTE: The test will fail on the first error for each system to save time.
#NOTE: You can use Kdiff3 three file to select the baseline, *.hvac.rb, and *.osm
#      file for a three way diff of before sizing, and then standard application.
#NOTE: To focus on a single system type "dont_" in front of the tests you do not want to run.
#       EX: def dont_test_system_1()
# Hopefully this makes is easier to debug the HVAC stuff!


class NECB_HVAC_System_7_Test < MiniTest::Test
  WEATHER_FILE = 'CAN_ON_Toronto.Pearson.Intl.AP.716240_CWEC2016.epw'
  Vintages = ['NECB2011']


  #  #Todo
  #  #Sizing Convergence Errors when mua_cooling_types = DX
  def test_system_7_$(boiler_fueltypes_snake)_$(chiller_types_snake)_$(mua_cooling_types_snake)()
    boiler_fueltypes = ["$(boiler_fueltype)"]
    chiller_types = ["$(chiller_type)"]
    mua_cooling_types = ["$(mua_cooling_type)"]
    output_folder = "#{File.dirname(__FILE__)}/output/test_necb_system_7"
    name = String.new

    # FileUtils.rm_rf(output_folder)
    FileUtils::mkdir_p(output_folder)

    Vintages.each do |vintage|
      standard = Standard.build(vintage)
      boiler_fueltypes.each do |boiler_fueltype|
        chiller_types.each do |chiller_type|
          mua_cooling_types.each do |mua_cooling_type|
            name = "sys7_Boiler~#{boiler_fueltype}_ChillerType~#{chiller_type}_MuaCoolingType~#{mua_cooling_type}"
            puts "***************************************#{name}*******************************************************\n"
            model = BTAP::FileIO::load_osm("#{File.dirname(__FILE__)}/models/5ZoneNoHVAC.osm")
            BTAP::Environment::WeatherFile.new(WEATHER_FILE).set_weather_file(model)
            hw_loop = OpenStudio::Model::PlantLoop.new(model)
            BTAP::Resources::HVAC::HVACTemplates::NECB2011::setup_hw_loop_with_components(model, hw_loop, boiler_fueltype, model.alwaysOnDiscreteSchedule)
            BTAP::Resources::HVAC::HVACTemplates::NECB2011::assign_zones_sys2(
                model,
                model.getThermalZones,
                boiler_fueltype,
                chiller_type,
                mua_cooling_type,
                hw_loop)
            #Save the model after btap hvac.
            BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.hvacrb")
            result = run_the_measure(model, standard, "#{output_folder}/#{name}/sizing")
            #Save model after standards
            BTAP::FileIO::save_osm(model, "#{output_folder}/#{name}.osm")
            assert_equal(true, result, "Failure in Standards for #{name}")
            result = standard.model_run_simulation_and_log_errors(model, "#{output_folder}/#{name}/")
            assert_equal(true, result, "Failure in Standards for #{name}")
          end
        end
      end
    end
  end

  def run_the_measure(model, standard, sizing_dir)
    # Hard-code the building vintage
    building_type = 'FullServiceRestaurant' # Does not use this...
    climate_zone = 'NECB HDD Method'

    if !Dir.exists?(sizing_dir)
      FileUtils.mkdir_p(sizing_dir)
    end
    # Perform a sizing run
    if standard.model_run_sizing_run(model, "#{sizing_dir}/SizingRun1") == false
      puts "could not find sizing run #{sizing_dir}/SizingRun1"
      raise("could not find sizing run #{sizing_dir}/SizingRun1")
      return false
    else
      puts "found sizing run #{sizing_dir}/SizingRun1"
    end

    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/before.osm")
    # need to set prototype assumptions so that HRV added
    standard.model_apply_prototype_hvac_assumptions(model, building_type, climate_zone)
    # Apply the HVAC efficiency standard
    standard.model_apply_hvac_efficiency_standard(model, climate_zone)
    #self.getCoilCoolingDXSingleSpeeds.sort.each {|obj| obj.setStandardEfficiencyAndCurves(self.template, self.standards)}
    # BTAP::FileIO::save_osm(model, "#{File.dirname(__FILE__)}/after.osm")
    return true
  end
end
}
        file_string['$(boiler_fueltype)'] = boiler_fueltype
        file_string['$(chiller_type)'] = chiller_type.to_s
        file_string['$(mua_cooling_type)'] = mua_cooling_type

        file_string['$(boiler_fueltypes_snake)'] = boiler_fueltype.to_s.snek
        file_string['$(chiller_types_snake)'] = chiller_type.to_s.snek
        file_string['$(mua_cooling_types_snake)'] = mua_cooling_type.to_s.snek

        File.open(filename, 'w') { |file| file.write(file_string) }
      }
    }
  }

end

def generate_doe_hvac_files

  hvac_systems = [
    ## Forced Air ##

    # Gas, Electric, forced air
    ['PTAC', 'NaturalGas', nil, 'Electricity'],
    ['PSZ-AC', 'NaturalGas', nil, 'Electricity'],
    # ['PVAV Reheat', 'NaturalGas', 'NaturalGas', 'Electricity'], # Disable this; failure due to bug in E+ 8.8 w/ VAV terminal min airflow sizing
    ['VAV Reheat', 'NaturalGas', 'NaturalGas', 'Electricity'],

    # Electric, Electric, forced air
    ['PTHP', 'Electricity', nil, 'Electricity'],
    ['PSZ-HP', 'Electricity', nil, 'Electricity'],
    ['PVAV PFP Boxes', 'Electricity', 'Electricity', 'Electricity'],
    ['VAV PFP Boxes', 'Electricity', 'Electricity', 'Electricity'],

    # District Hot Water, Electric, forced air
    ['PTAC', 'DistrictHeating', nil, 'Electricity'],
    # ['PVAV Reheat', 'DistrictHeating', 'DistrictHeating', 'Electricity'], # Disable this; failure due to bug in E+ 8.8 w/ VAV terminal min airflow sizing
    ['VAV Reheat', 'DistrictHeating', 'DistrictHeating', 'Electricity'],

    # Ambient Loop, Ambient Loop, forced air
    # ['PVAV Reheat', 'HeatPump', 'HeatPump', 'HeatPump'],
    # ['VAV Reheat', 'HeatPump', 'HeatPump', 'HeatPump'],

    # Gas, District Chilled Water, forced air
    ['PSZ-AC', 'NaturalGas', nil, 'DistrictCooling'],
    ['PVAV Reheat', 'NaturalGas', 'NaturalGas', 'DistrictCooling'],
    ['VAV Reheat', 'NaturalGas', 'NaturalGas', 'DistrictCooling'],

    # Electric, District Chilled Water, forced air
    ['PSZ-AC', 'Electricity', nil, 'DistrictCooling'],
    ['PVAV Reheat', 'Electricity', 'Electricity', 'DistrictCooling'],
    ['VAV Reheat', 'Electricity', 'Electricity', 'DistrictCooling'],

    # District Hot Water, District Chilled Water, forced air
    ['PVAV Reheat', 'DistrictHeating', 'DistrictHeating', 'DistrictCooling'],
    ['VAV Reheat', 'DistrictHeating', 'DistrictHeating', 'DistrictCooling'],

    ## Hydronic ##

    # Gas, Electric, hydronic
    ['Fan Coil with DOAS', 'NaturalGas', nil, 'Electricity'],
    ['Water Source Heat Pumps with DOAS', 'NaturalGas', nil, 'Electricity'],
    ['Fan Coil with DOAS', 'NaturalGas', 'NaturalGas', 'Electricity'],

    # Electric, Electric, hydronic
    ['Ground Source Heat Pumps with ERVs', 'Electricity', nil, 'Electricity'],
    ['Ground Source Heat Pumps with DOAS', 'Electricity', nil, 'Electricity'],
    ['Ground Source Heat Pumps with DOAS', 'Electricity', 'Electricity', 'Electricity'],

    # District Hot Water, Electric, hydronic
    ['Fan Coil with DOAS', 'DistrictHeating', nil, 'Electricity'],
    ['Water Source Heat Pumps with DOAS', 'DistrictHeating', 'DistrictHeating', 'Electricity'],
    ['Fan Coil with DOAS', 'DistrictHeating', 'DistrictHeating', 'Electricity'],

    # Ambient Loop, Ambient Loop, hydronic
    ['Water Source Heat Pumps with ERVs', 'HeatPump', nil, 'HeatPump'],
    ['Water Source Heat Pumps with DOAS', 'HeatPump', nil, 'HeatPump'],
    ['Water Source Heat Pumps with DOAS', 'HeatPump', 'HeatPump', 'HeatPump'],

    # Gas, District Chilled Water, hydronic
    ['Fan Coil with DOAS', 'NaturalGas', nil, 'DistrictCooling'],
    ['Fan Coil with DOAS', 'NaturalGas', 'NaturalGas', 'DistrictCooling'],

    # Electric, District Chilled Water, hydronic
    ['Fan Coil with ERVs', 'Electricity', nil, 'DistrictCooling'],
    ['Fan Coil with DOAS', 'Electricity', 'Electricity', 'DistrictCooling'],

    # District Hot Water, District Chilled Water, hydronic
    ['Fan Coil with ERVs', 'DistrictHeating', nil, 'DistrictCooling'],
    ['Fan Coil with DOAS', 'DistrictHeating', nil, 'DistrictCooling'],
    ['Fan Coil with DOAS', 'DistrictHeating', 'DistrictHeating', 'DistrictCooling']
  ]

  hvac_systems.each {|hvac_system|
    # puts hvac_system.inspect
    filename = File.join(file_out_dir(),"doe_test_add_hvac_systems_#{hvac_system[0].snek}-#{hvac_system[1].to_s.snek}-#{hvac_system[2].inspect.snek}-#{hvac_system[3].snek}.rb")
    puts filename
    file_string = %q{
require_relative '../helpers/minitest_helper'

class TestAddHVACSystems < Minitest::Test

  def test_add_hvac_systems_$(0)_$(1)_$(2)_$(3)

    # Make the output directory if it doesn't exist
    output_dir = File.expand_path('output', File.dirname(__FILE__))
    FileUtils.mkdir output_dir unless Dir.exist? output_dir

    # List all the HVAC system types to test
    hvac_systems = [
      $(hvac_system)
    ]

    template = '90.1-2013'
    standard = Standard.build(template)

    # Add each HVAC system to the test model
    # and run a sizing run to ensure it simulates.
    i = 0
    errs = []
    hvac_systems.each do |system_type, main_heat_fuel, zone_heat_fuel, cool_fuel|
      i += 1
      # next if i < 13

      reset_log

      type_desc = "#{system_type} #{main_heat_fuel} #{zone_heat_fuel} #{cool_fuel}"
      puts "running #{type_desc}"

      model_dir = "#{output_dir}/hvac_#{system_type}_#{main_heat_fuel}_#{zone_heat_fuel}_#{cool_fuel}"
      # Load the model if already created
      if File.exist?("#{model_dir}/final.osm")

        model = OpenStudio::Model::Model.new
        sql = standard.safe_load_sql("#{model_dir}/AR/run/eplusout.sql")
        model.setSqlFile(sql)

      # If not created, make and run annual simulation
      else

        # Load the test model
        model = standard.safe_load_model("#{File.dirname(__FILE__)}/models/basic_2_story_office_no_hvac.osm")

        # Assign a weather file
        standard.model_add_design_days_and_weather_file(model, 'ASHRAE 169-2006-7A', '')
        standard.model_add_ground_temperatures(model, 'MediumOffice', 'ASHRAE 169-2006-7A')
        # Add the HVAC
        standard.model_add_hvac_system(model, system_type, main_heat_fuel, zone_heat_fuel, cool_fuel, model.getThermalZones)

        # Save the model
        model.save("#{model_dir}/final.osm", true)

        # Run the sizing run
        annual_run_success = standard.model_run_simulation_and_log_errors(model, "#{model_dir}/AR")

        # Log the errors
        log_messages_to_file("#{model_dir}/openstudio-standards.log", debug=false)

        errs << "For #{type_desc} annual run failed" unless annual_run_success

      end

      # Check the conditioned floor area
      errs << "For #{type_desc} there was no conditioned area." if standard.model_net_conditioned_floor_area(model) == 0

      # Check the unmet hours
      unmet_hrs = standard.model_annual_occupied_unmet_hours(model)
      max_unmet_hrs = 550
      if unmet_hrs
        errs << "For #{type_desc} there were #{unmet_hrs} unmet occupied heating and cooling hours, more than the limit of #{max_unmet_hrs}." if unmet_hrs > max_unmet_hrs
      else
        errs << "For #{type_desc} could not determine unmet hours; simulation may have failed."
      end
    end

    assert(errs.size == 0, errs.join("\n"))

    return true
  end
end
}
    file_string["$(hvac_system)"] = hvac_system.inspect
    file_string["$(0)"] = hvac_system[0].inspect.snek
    file_string["$(1)"] = hvac_system[1].inspect.snek
    file_string["$(2)"] = hvac_system[2].inspect.snek
    file_string["$(3)"] = hvac_system[3].inspect.snek

    File.open(filename, 'w') { |file| file.write(file_string) }
  }

end

cleanup_output_folders()
copy_doe_model_files_for_hvac_tests()
generate_doe_hvac_files()
generate_ci_bldg_test_files()
copy_model_files_for_hvac_tests()
generate_hvac_sys1_files()
generate_hvac_sys2_files()
generate_hvac_sys3_files()
generate_hvac_sys4_files()
# generate_hvac_sys5_files() # known failure
generate_hvac_sys6_files()
generate_hvac_sys7_files()
write_file_path_to_ci_tests_txt()
# This workflow will check formatting with Black, install Python dependencies,
# and run tests with pytest
on:
  pull_request:
    path:
      - 'data/data-refactor'
jobs:
  check:
    name: Check changes
    outputs:
      run_job: ${{steps.check_files.outputs.run_job}}
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check modified files
        id: check_files
        run: |
          echo "================ list modifid files ============="
          git diff --name-only HEAD^ HEAD
          
          echo "======== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD &gt; files.txt
          while IFS=read -r file
          do
            echo $file
            if [[ $file == data/database/* ]]; then
              echo "::set-output name=run_job::true"
            fi
          done &lt; files.txt

  black-formatting-check:
    name: Black formatting check
    needs: check
    if: needs.check.outputs.run_job == 'true'
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
        # This will halt the action if formatting fails
         # Note: This will also fail if there are syntax errors
      - uses: psf/black@stable
        with:
            version: "22.12.0"
  run-unit-tests:
    name: Run unit tests
    needs: check
    if: needs.check.outputs.run_job == 'true'
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pipenv'
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
        working-directory: 'data/database'
      - name: Install dpendencies
        run: pipenv install --dev
        working-directory: 'data/database'
      - name: Run pytests
        # This will halt the action if any of the tests fail
        run: pipenv run pytest -v
        working-directory: 'data/database'